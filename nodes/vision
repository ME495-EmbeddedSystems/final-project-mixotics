#!/usr/bin/env python3

""" 
Broadcasts transforms for ingredient bottles and determines if there is 
room for another order (cup) in the prep area. 

PUBLISHERS:
  + pub_cup (CupDetection) ~ boolean array showing which cup slots are open

SUBSCRIBERS:
  + sub_color (Image) ~ raw color image array
  + sub_depth (Image) ~ aligned depth to color image array
  + sub_intr (Image) ~ camera intrinsics

"""

import rospy
import cv2
from sensor_msgs.msg import Image, CameraInfo
from geometry_msgs.msg import TransformStamped
from cv_bridge import CvBridge, CvBridgeError
import numpy as np
import pyrealsense2 as rs
import tf2_ros
from final_project_mixotics.msg import CupDetection
from menu_utilities.enum_defs import StoreRoomEnum as sre


class Vision:
    """ Class for detecting cups and ingredients by color.

    :param sub_color: Subscriber for /camera/color/image_raw topic
    :param sub_depth: Subscriber for /camera/aligned_depth_to_color/image_raw topic
    :param sub_intr: Subscriber for /camera/depth/camera_info topic
    :param water_broadcaster: Transform broadcaster for water bottle
    :param sugar_broadcaster: Transform broadcaster for sugar bottle
    :param lemon_broadcaster: Transform broadcaster for lemon bottle
    :param tea_broadcaster: Transform broadcaster for tea bottle
    :param color: Boolean indicating whether tfs should be broadcast
    :param bridge: Converts between ROS Image messages and OpenCV images
    :param intrinsics: Stores camera intrinsics
    :param color_image: Color image array from camera
    :param depth_image: Aligned depth to color image array from camera
    :param ingredient_ids: Dictionary mapping ingredient names to ID as defined in enum_defs.StoreRoomEnum
    :param color_to_ing: Dictionary mapping colors to ingredient names
    "param ing_to_broadcaster: Dictionary mapping ingredient name to broadcaster
    :param thresholds_hsv: Dictionary mapping colors to HSV threshold range for masking
    :param r: publishing frequency
    """
    

    
    def __init__(self):
        """Initializes necessary parameters for vision object."""

        # Subscribers for image data and intrinsics
        self.sub_color = rospy.Subscriber('/camera/color/image_raw', Image, self.color_callback)
        self.sub_depth = rospy.Subscriber('/camera/aligned_depth_to_color/image_raw', Image, self.depth_callback)
        self.sub_intr = rospy.Subscriber('/camera/depth/camera_info', CameraInfo, self.intr_callback)

        # Publisher for cup slot status data (filled vs not)
        self.pub_cup = rospy.Publisher('cup_status', CupDetection, queue_size=10)
        
        # Broadcasters for bottle and cup tfs
        self.water_broadcaster = tf2_ros.TransformBroadcaster()
        self.sugar_broadcaster = tf2_ros.TransformBroadcaster()
        self.lemon_broadcaster = tf2_ros.TransformBroadcaster()
        self.tea_broadcaster = tf2_ros.TransformBroadcaster()

        # Bool to determine if tfs are broadcast
        self.color = rospy.get_param('/use_color')

        self.bridge = CvBridge() 

        # Initialize camera intrinsics and images as empty   
        self.intrinsics = None
        self.color_image = []
        self.depth_image = []

        # Initialize cup array for booleans indicating cup status
        self.cup_array = []

        # Mapping of ingredient names to id
        self.ingredient_ids = {
            'water': sre.WATER.value,
            'sugar': sre.SUGAR.value,
            'lemon': sre.LEMON.value,
            'tea': sre.TEA.value
            }

        # Mapping of color to ingredient name
        self.color_to_ing = {
            'blue': 'water',
            'green': 'sugar',
            'yellow': 'lemon',
            'orange': 'tea'
        }

        # Mapping of color to cup id
        self.color_to_cup = {
            'blue': 0,
            'green': 1,
            'yellow': 2,
            'orange': 3
        }

        # Mapping of ingredient name to broadcaster
        self.ing_to_broadcaster = {
            'water': self.water_broadcaster,
            'sugar': self.sugar_broadcaster,
            'lemon': self.lemon_broadcaster,
            'tea': self.tea_broadcaster
        }

        # Color thresholds to be used in mask for get_position
        self.thresholds_hsv = {
            'blue': (np.array([0, 225, 20]), np.array([20, 255, 255])),
            'green': (np.array([50, 100, 20]), np.array([70, 255, 255])),
            'yellow': (np.array([75, 75, 20]), np.array([95, 255, 255])),
            'orange': (np.array([115, 120, 20]), np.array([135, 255, 255])),
        }

        self.r = rospy.Rate(100)

    def get_depth(self, x, y, depth_image):
        """Returns average depth of a small area around given pixel coordinate.

        :param x: x-coordinate of pixel where depth calculation is centered
        :param y: y-coordinage of pixel where depth calculation is centered
        :param depth_image: depth image array

        :return depth: average depth of 10x10 pixel square around given x, y

        """
        dim = depth_image.shape
        if dim[1]-x < 5:
            if dim[0]-y < 5:
                depth = depth_image[y-(dim[0]-y):y+(dim[0]-y), x-(dim[1]-x):x+(dim[1]-x)]
            else:
                depth = depth_image[y-5:y+5, x-(dim[1]-x):x+(dim[1]+x)]
        elif dim[0]-y < 5:
            depth = depth_image[y-(dim[0]-y):y+(dim[0]-y), x-5:x+5]
        else:
            depth = depth_image[y-5:y+5, x-5:x+5]

        depth = np.average(depth)
        return depth

    def calc_cup_avg(self, cup_array):
        """Calculates rolling average of True/False values for cup status array.

        :param cup_array: Boolean array giving status of cup slots (occupied/open)
        """
        count = [0, 0, 0, 0]
        for i, status in enumerate(cup_array):
            if i >=6:
                inc = 0.6
            elif i > 3 and i < 6:
                inc = 0.3
            else:
                inc = 0.1

            for idx, cup in enumerate(status):
                if cup:
                    count[idx] = count[idx] + inc
                    
        cup_status = [c > 0.5 for c in count]
        # rospy.logerr(cup_status)
        return cup_status

    def cup_detection(self, color_image):
        """Uses vision to detect colored cups and returns array giving
        status of cup slots (occupied or open).

        :param color_image: color image array
        """

        try:
            hsv_image = cv2.cvtColor(color_image, cv2.COLOR_BGR2HSV)
        except:
            return False

        if (len(color_image) == 0): 
            rospy.logerr('MISSING COLOR IMAGE')
            return False

        clipped_img = hsv_image[:int(hsv_image.shape[0]/2)]
        # self.show_image(clipped_img, 'Clipped')

        cup_status = [False, False, False, False]
        for k, v in self.thresholds_hsv.items():

            mask = cv2.inRange(clipped_img, v[0], v[1])

            res = cv2.bitwise_and(clipped_img, clipped_img, mask=mask)

            kernel = np.ones((5, 5), np.uint8)
            erode = cv2.erode(res, kernel, iterations = 1)
            dilate = cv2.dilate(erode, kernel, iterations = 1)

            contours = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)[0]
            if len(contours) > 0:
                c_cup = max(contours, key=cv2.contourArea)
                if cv2.contourArea(c_cup) > 200:
                    filled = True
                else:
                    filled = False
                cv2.drawContours(dilate, c_cup, -1, (0, 255, 0), 8)
                self.show_image(dilate, f'Clipped - {k}')
            else: 
                filled = False

            cup_status[self.color_to_cup[k]] = filled
            
        self.cup_array.append(cup_status)
        rospy.logerr(self.cup_array)


        if len(self.cup_array) > 10:
            del self.cup_array[0]
            cup_avg = self.calc_cup_avg(self.cup_array)
            self.pub_cup.publish(cup_avg)

    def get_position(self, color_image, depth_image, intrinsics):
        """Returns dictionary with ingredient names as keys and their bottle
        position [x, y, z] as the corresponding value (e.g., 'water': [1, 2, 3]).
        Returns False if color or depth image is missing, or if color image
        cannot be converted to HSV.

            :param color_image: color image array
            :param depth_image: aligned depth to color image array
            :param intrinsics: camera intrinsics

            :returns bottle_pos: dictionary mapping ingredient names to [x, y, z] pos
        """
        try:
            hsv_image = cv2.cvtColor(color_image, cv2.COLOR_BGR2HSV)
        except:
            return False

        if (len(color_image) == 0): 
            rospy.logerr('MISSING COLOR IMAGE')
            return False
        elif (len(depth_image) == 0):
            rospy.logerr('MISSING DEPTH IMAGE')
            return False

        bottle_pos = {}
        for k, v in self.thresholds_hsv.items():

            mask = cv2.inRange(hsv_image, v[0], v[1])

            res = cv2.bitwise_and(color_image, color_image, mask=mask)

            kernel = np.ones((5, 5), np.uint8)
            erode = cv2.erode(res, kernel, iterations = 1)
            dilate = cv2.dilate(erode, kernel, iterations = 1)

            contours = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)[0]

            if len(contours) > 0:
                c_bottle = max(contours, key=cv2.contourArea)
                # c_cup = max(contours.remove(max(contours)), key=cv2.contourArea)
                # rospy.logerr(max([cv2.contourArea(c) for c in contours].remove(max([cv2.contourArea(c) for c in contours])))
                m = cv2.moments(c_bottle)
                cx = int(m['m10']/(m['m00']+ 0.00001))
                cy = int(m['m01']/(m['m00']+ 0.00001))
                centroid_list = []
                if len(centroid_list) > 10:
                    del centroid_list[0]
                    centroid_list.append((cx, cy))
                else:
                    centroid_list.append((cx, cy))
                cv2.drawContours(dilate, c_bottle, -1, (0, 255, 0), 8)
                cv2.circle(dilate, (cx, cy), 7, (255, 255, 255), 2)

                depth = self.get_depth(cx, cy, depth_image)

                point = rs.rs2_deproject_pixel_to_point(intrinsics, [cx, cy], depth)

                bottle_pos[self.color_to_ing[k]] = [p/1000 for p in point]

                # self.show_image(dilate, self.color_to_ing[k])

        return bottle_pos

    def broadcast(self, xyz, name):
        """Creates and broadcasts transforms for ingredient bottles.

            :param xyz: list of real-world corrdinates [x, y, z]
            :param name: ingredient name of bottle to be broadcast

            :returns 
        """
        camera_bottle_tf = TransformStamped()

        ingredient_num = self.ingredient_ids[name]

        frame_name = f'ingredient0{ingredient_num}_tag'
        # rospy.logerr(frame_name)

        # generate transform
        camera_bottle_tf.header.stamp = rospy.Time.now()
        camera_bottle_tf.header.frame_id = 'camera_color_optical_frame'
        camera_bottle_tf.child_frame_id = frame_name
        
        # adjust to center
        camera_bottle_tf.transform.translation.x = xyz[0]
        camera_bottle_tf.transform.translation.y = xyz[1]
        camera_bottle_tf.transform.translation.z = xyz[2]

        # use quaternion values
        camera_bottle_tf.transform.rotation.x = 0
        camera_bottle_tf.transform.rotation.y = 0
        camera_bottle_tf.transform.rotation.z = 0
        camera_bottle_tf.transform.rotation.w = 1
        # rospy.logerr(name)

        broadcaster = self.ing_to_broadcaster[name]
        broadcaster.sendTransform(camera_bottle_tf)

    def color_callback(self, img):
        """Callback for the color image subscriber (sub_color)."""
        try:
            color_image = self.bridge.imgmsg_to_cv2(img, 'passthrough')
            self.color_image = color_image
        except CvBridgeError as e:
            rospy.logerr('CvBridge Error: {0}'.format(e))
        
        
    def depth_callback(self, img):
        """Callback for the depth image subscriber (sub_depth)."""
        try:
            depth_image = self.bridge.imgmsg_to_cv2(img, 'passthrough')
            self.depth_image = depth_image
        except CvBridgeError as e:
            rospy.logerr('CvBridge Error: {0}'.format(e))
        

    def intr_callback(self, intr):
        """Callback for the camera intrinsics subscriber (sub_intr)."""
        intrinsics = rs.intrinsics()
        intrinsics.width = intr.width
        intrinsics.height = intr.height
        intrinsics.ppx = intr.K[2]
        intrinsics.ppy = intr.K[5]
        intrinsics.fx = intr.K[0]
        intrinsics.fy = intr.K[4]
        intrinsics.model = rs.distortion.none
        intrinsics.coeffs = [i for i in intr.D]
        self.intrinsics = intrinsics
        
    def show_image(self, img, img_name):
        """Displays image in a named window.
        
        :param img: image array to be displayed
        :param img_name: name of image window
        """
        cv2.namedWindow(img_name, cv2.WINDOW_NORMAL)
        cv2.imshow(img_name, img)
        cv2.waitKey(3)

def main():
    """ The main() function. """
    rospy.init_node('vision')
    v = Vision()
    while not rospy.is_shutdown():
        pos_dict = v.get_position(v.color_image, v.depth_image, v.intrinsics)
        if pos_dict and v.color:
            for k, val in pos_dict.items():
                v.broadcast(val, k)
        v.cup_detection(v.color_image)
        v.r.sleep()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass